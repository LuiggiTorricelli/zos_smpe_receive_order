---
- name: "Assert that input variables were informed correctly."
  ansible.builtin.assert:
    that:
      - (smpe_csi is string) and (smpe_csi is iterable) and (smpe_csi is not mapping)
      - (smpe_options is not string) and (smpe_options is iterable) and (smpe_options is not mapping)
      - (smpe_smpnts is string) and (smpe_smpnts is iterable) and (smpe_smpnts is not mapping)
      - (smpe_csi | length > 0) and (smpe_csi | length <= 42) and (smpe_csi | trim == smpe_csi)
      - (smpe_smpnts | length > 0) and (smpe_smpnts | trim == smpe_smpnts)
    success_msg: "SUCCESS: The input variables were informed successfully!"
    fail_msg: "ERROR: One or more input variables were wrongly informed. Make sure there are no extra spaces on the variables and the length is being respected."
    quiet: true

- name: "Assert that ORDER, CLIENTINFO and ORDERSERVER options were informed correctly."
  ansible.builtin.assert:
    that:
      - smpe_order | isValidContent('ORDER')
      - smpe_client | isValidContent('CLIENTINFO')
      - smpe_orderserver | isValidContent('ORDERSERVER')
    success_msg: "SUCCESS: The ORDER, CLIENTINFO and ORDERSERVER options were informed successfully!"
    fail_msg: "ERROR: The ORDER, CLIENTINFO and/or the ORDERSERVER were informed incorrectly."
    quiet: true

- name: "Verify if informed SMP/E CSI data set exists."
  ibm.ibm_zos_core.zos_find:
    patterns: "{{ smpe_csi | upper }}"
    resource_type: cluster
  register: zos_smpe_receive_order_find_csi

- name: "Fail play if informed SMP/E CSI data set does not exist."
  ansible.builtin.fail:
    msg: "ERROR: The informed SMP/E CSI data set '{{ smpe_csi | upper }}' was not found."
  when: zos_smpe_receive_order_find_csi.data_sets | length == 0

- name: "Execute GIMSMP program with SMP/E RECEIVE ORDER command to submit an Internet Service Retrieval request to the IBM Automated Delivery Request server."
  ibm.ibm_zos_core.zos_mvs_raw:
    program_name: gimsmp
    parm: "PROCESS=WAIT"
    auth: true
    dds:
      - dd_data_set:
          dd_name: smpcsi
          data_set_name: "{{ smpe_csi | upper }}"
      - dd_unix:
          dd_name: smpnts
          disposition_normal: keep
          path: "{{ smpe_smpnts }}"
      - dd_output:
          dd_name: smpout
          return_content:
            type: text
      - dd_output:
          dd_name: smprpt
          return_content:
            type: text
      - dd_output:
          dd_name: smplist
          return_content:
            type: text
      - dd_output:
          dd_name: sysprint
          return_content:
            type: text
      - dd_vio:
          dd_name: sysut1
      - dd_vio:
          dd_name: sysut2
      - dd_vio:
          dd_name: sysut3
      - dd_vio:
          dd_name: sysut4
      - dd_input:
          dd_name: clntinfo
          content: "{{ lookup('template', 'clientinfo.j2') }}"
      - dd_input:
          dd_name: ordrsrvr
          content: "{{ lookup('template', 'orderserver.j2') }}"
      - dd_input:
          dd_name: smpcntl
          content: "{{ lookup('template', 'smpcntl.j2') }}"
  failed_when: zos_smpe_receive_order_output.ret_code.code | int > 4
  register: zos_smpe_receive_order_output

- name: "If return code is different than 0 or 4, fail and display the entire job output."
  ansible.builtin.debug:
    msg: "{{ zos_smpe_receive_order_output }}"
  when: zos_smpe_receive_order_output.ret_code.code | int not in [0, 4]
  failed_when: zos_smpe_receive_order_output.ret_code.code | int not in [0, 4]

- name: "Set fact containing the order number and the received SYSMODs."
  ansible.builtin.set_fact:
    zos_smpe_receive_order_details:
      order_id: "{{ __smpout | regex_findall('GIM69144I +ORDER +(\\S+)') | first }}"
      sysmods: "{{ __smprpt_sysmods | selectattr('sysmod_id', 'in', __smpout_sysmods) | list }}"
      latest_rsu: "{{ __rsus | sort(reverse=true) | first | default('NOT FOUND') }}"
      latest_put: "{{ __puts | sort(reverse=true) | first | default('NOT FOUND') }}"
  vars:
    __smpout: "{{ (zos_smpe_receive_order_output.dd_names | selectattr('dd_name', 'eq', 'smpout') | list | first).content | join('\n') }}"
    __smprpt: "{{ (zos_smpe_receive_order_output.dd_names | selectattr('dd_name', 'eq', 'smprpt') | list | first).content | join('\n') }}"
    __smpout_sysmods: "{{ __smpout | regex_findall('GIM22701I +RECEIVE +PROCESSING +WAS +SUCCESSFUL +FOR +SYSMOD +(\\S+)\\.') | list }}"
    __smprpt_sysmods: |-
      {%- set result = [] -%}
      {%- set sysmods = ((__smprpt | regex_replace('( *SYSMOD +STATUS +TYPE +SOURCEID +FEATURE +STATUS FIELD COMMENTS *)', '<sep>') | regex_replace('\fPAGE \d+  +- +NOW SET.+\n', '') | regex_replace('\n +RECEIVE +\+\+HOLD/\+\+RELEASE SUMMARY REPORT', '<sep>')).split('<sep>')[1] | regex_replace('(?m)^(\S{1,7})', '<sep>\\1') | regex_replace('\n{2,}', '')).split('<sep>') | select() | list -%}
      {%- for sysmod in sysmods -%}
        {%- set ns = namespace(obj={}) -%}
        {%- set source_ids = [] -%}
        {%- set features = [] -%}
        {{- ns.obj.__setitem__('sysmod_id', sysmod | regex_findall('^(\S+)') | first) -}}
        {%- set content = sysmod.split('\n') | select() | list -%}
        {%- for line in content -%}
          {%- set parsed_line = line | regex_findall('.{7} {0,2}(.{0,12}) {0,2}(.{0,8}) {0,2}(.{0,8}) {0,2}(.{0,8}) {0,2}(.*)') | flatten(levels=1) | map('trim') | list -%}
          {%- if parsed_line[0] == 'ASSIGNED' -%}
            {{- source_ids.append(parsed_line[2]) -}}
          {%- elif parsed_line[0] == 'ASSOCIATED' -%}
            {{- features.append(parsed_line[3]) -}}
          {%- endif -%}
        {%- endfor -%}
        {{- ns.obj.__setitem__('source_ids', source_ids) -}}
        {{- ns.obj.__setitem__('features', features) -}}
        {{- result.append(ns.obj) -}}
      {%- endfor -%}
      {{- result -}}
    __rsus: "{{ __smprpt_sysmods | map(attribute='source_ids') | flatten(levels=1) | select('match', 'RSU\\d{4}') | list }}"
    __puts: "{{ __smprpt_sysmods | map(attribute='source_ids') | flatten(levels=1) | select('match', 'PUT\\d{4}') | list }}"

- name: "Display details content if show_output is true."
  ansible.builtin.debug:
    msg: "{{ zos_smpe_receive_order_details }}"
  when: show_output
